// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tsynctl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TsynctlClient is the client API for Tsynctl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TsynctlClient interface {
	// Sends the mode
	GetMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModeReply, error)
	// Sends the status
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error)
	// Sends the IPC time
	GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimeReply, error)
	// Sends the class
	GetClass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClassReply, error)
	// Sends the alarms
	StreamAlarms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tsynctl_StreamAlarmsClient, error)
	// Get the parameters
	GetParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParamsReply, error)
}

type tsynctlClient struct {
	cc grpc.ClientConnInterface
}

func NewTsynctlClient(cc grpc.ClientConnInterface) TsynctlClient {
	return &tsynctlClient{cc}
}

func (c *tsynctlClient) GetMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModeReply, error) {
	out := new(ModeReply)
	err := c.cc.Invoke(ctx, "/tsynctl.Tsynctl/GetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/tsynctl.Tsynctl/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlClient) GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimeReply, error) {
	out := new(TimeReply)
	err := c.cc.Invoke(ctx, "/tsynctl.Tsynctl/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlClient) GetClass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClassReply, error) {
	out := new(ClassReply)
	err := c.cc.Invoke(ctx, "/tsynctl.Tsynctl/GetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlClient) StreamAlarms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tsynctl_StreamAlarmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tsynctl_ServiceDesc.Streams[0], "/tsynctl.Tsynctl/StreamAlarms", opts...)
	if err != nil {
		return nil, err
	}
	x := &tsynctlStreamAlarmsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tsynctl_StreamAlarmsClient interface {
	Recv() (*AlarmReply, error)
	grpc.ClientStream
}

type tsynctlStreamAlarmsClient struct {
	grpc.ClientStream
}

func (x *tsynctlStreamAlarmsClient) Recv() (*AlarmReply, error) {
	m := new(AlarmReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tsynctlClient) GetParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParamsReply, error) {
	out := new(ParamsReply)
	err := c.cc.Invoke(ctx, "/tsynctl.Tsynctl/GetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TsynctlServer is the server API for Tsynctl service.
// All implementations must embed UnimplementedTsynctlServer
// for forward compatibility
type TsynctlServer interface {
	// Sends the mode
	GetMode(context.Context, *Empty) (*ModeReply, error)
	// Sends the status
	GetStatus(context.Context, *Empty) (*StatusReply, error)
	// Sends the IPC time
	GetTime(context.Context, *Empty) (*TimeReply, error)
	// Sends the class
	GetClass(context.Context, *Empty) (*ClassReply, error)
	// Sends the alarms
	StreamAlarms(*Empty, Tsynctl_StreamAlarmsServer) error
	// Get the parameters
	GetParams(context.Context, *Empty) (*ParamsReply, error)
	mustEmbedUnimplementedTsynctlServer()
}

// UnimplementedTsynctlServer must be embedded to have forward compatible implementations.
type UnimplementedTsynctlServer struct {
}

func (UnimplementedTsynctlServer) GetMode(context.Context, *Empty) (*ModeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMode not implemented")
}
func (UnimplementedTsynctlServer) GetStatus(context.Context, *Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTsynctlServer) GetTime(context.Context, *Empty) (*TimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedTsynctlServer) GetClass(context.Context, *Empty) (*ClassReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClass not implemented")
}
func (UnimplementedTsynctlServer) StreamAlarms(*Empty, Tsynctl_StreamAlarmsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAlarms not implemented")
}
func (UnimplementedTsynctlServer) GetParams(context.Context, *Empty) (*ParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedTsynctlServer) mustEmbedUnimplementedTsynctlServer() {}

// UnsafeTsynctlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TsynctlServer will
// result in compilation errors.
type UnsafeTsynctlServer interface {
	mustEmbedUnimplementedTsynctlServer()
}

func RegisterTsynctlServer(s grpc.ServiceRegistrar, srv TsynctlServer) {
	s.RegisterService(&Tsynctl_ServiceDesc, srv)
}

func _Tsynctl_GetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlServer).GetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsynctl.Tsynctl/GetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlServer).GetMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tsynctl_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsynctl.Tsynctl/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tsynctl_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsynctl.Tsynctl/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlServer).GetTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tsynctl_GetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlServer).GetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsynctl.Tsynctl/GetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlServer).GetClass(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tsynctl_StreamAlarms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TsynctlServer).StreamAlarms(m, &tsynctlStreamAlarmsServer{stream})
}

type Tsynctl_StreamAlarmsServer interface {
	Send(*AlarmReply) error
	grpc.ServerStream
}

type tsynctlStreamAlarmsServer struct {
	grpc.ServerStream
}

func (x *tsynctlStreamAlarmsServer) Send(m *AlarmReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Tsynctl_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsynctl.Tsynctl/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlServer).GetParams(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Tsynctl_ServiceDesc is the grpc.ServiceDesc for Tsynctl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tsynctl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tsynctl.Tsynctl",
	HandlerType: (*TsynctlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMode",
			Handler:    _Tsynctl_GetMode_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Tsynctl_GetStatus_Handler,
		},
		{
			MethodName: "GetTime",
			Handler:    _Tsynctl_GetTime_Handler,
		},
		{
			MethodName: "GetClass",
			Handler:    _Tsynctl_GetClass_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _Tsynctl_GetParams_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAlarms",
			Handler:       _Tsynctl_StreamAlarms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tsynctl/tsynctl.proto",
}
