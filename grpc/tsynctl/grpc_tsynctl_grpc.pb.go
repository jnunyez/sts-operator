// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_tsynctl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TsynctlGrpcClient is the client API for TsynctlGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TsynctlGrpcClient interface {
	GetMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error)
	GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimeReply, error)
	GetAlarms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TsynctlGrpc_GetAlarmsClient, error)
	GetStat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	ResetStat(ctx context.Context, in *ResetStatRequest, opts ...grpc.CallOption) (*ResetStatReply, error)
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error)
	GetClockClass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoReply, error)
	GetParam(ctx context.Context, in *ParamRequest, opts ...grpc.CallOption) (*ParamReply, error)
	GetParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParamsReply, error)
}

type tsynctlGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTsynctlGrpcClient(cc grpc.ClientConnInterface) TsynctlGrpcClient {
	return &tsynctlGrpcClient{cc}
}

func (c *tsynctlGrpcClient) GetMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimeReply, error) {
	out := new(TimeReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetAlarms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TsynctlGrpc_GetAlarmsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TsynctlGrpc_ServiceDesc.Streams[0], "/grpc_tsynctl.TsynctlGrpc/GetAlarms", opts...)
	if err != nil {
		return nil, err
	}
	x := &tsynctlGrpcGetAlarmsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TsynctlGrpc_GetAlarmsClient interface {
	Recv() (*AlarmReply, error)
	grpc.ClientStream
}

type tsynctlGrpcGetAlarmsClient struct {
	grpc.ClientStream
}

func (x *tsynctlGrpcGetAlarmsClient) Recv() (*AlarmReply, error) {
	m := new(AlarmReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tsynctlGrpcClient) GetStat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) ResetStat(ctx context.Context, in *ResetStatRequest, opts ...grpc.CallOption) (*ResetStatReply, error) {
	out := new(ResetStatReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/ResetStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetClockClass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetClockClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetParam(ctx context.Context, in *ParamRequest, opts ...grpc.CallOption) (*ParamReply, error) {
	out := new(ParamReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsynctlGrpcClient) GetParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ParamsReply, error) {
	out := new(ParamsReply)
	err := c.cc.Invoke(ctx, "/grpc_tsynctl.TsynctlGrpc/GetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TsynctlGrpcServer is the server API for TsynctlGrpc service.
// All implementations must embed UnimplementedTsynctlGrpcServer
// for forward compatibility
type TsynctlGrpcServer interface {
	GetMode(context.Context, *Empty) (*MessageReply, error)
	GetTime(context.Context, *Empty) (*TimeReply, error)
	GetAlarms(*Empty, TsynctlGrpc_GetAlarmsServer) error
	GetStat(context.Context, *StatRequest) (*StatReply, error)
	ResetStat(context.Context, *ResetStatRequest) (*ResetStatReply, error)
	GetStatus(context.Context, *Empty) (*MessageReply, error)
	GetClockClass(context.Context, *Empty) (*MessageReply, error)
	GetInfo(context.Context, *Empty) (*InfoReply, error)
	GetParam(context.Context, *ParamRequest) (*ParamReply, error)
	GetParams(context.Context, *Empty) (*ParamsReply, error)
	mustEmbedUnimplementedTsynctlGrpcServer()
}

// UnimplementedTsynctlGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedTsynctlGrpcServer struct {
}

func (UnimplementedTsynctlGrpcServer) GetMode(context.Context, *Empty) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMode not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetTime(context.Context, *Empty) (*TimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetAlarms(*Empty, TsynctlGrpc_GetAlarmsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlarms not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetStat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}
func (UnimplementedTsynctlGrpcServer) ResetStat(context.Context, *ResetStatRequest) (*ResetStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetStat not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetStatus(context.Context, *Empty) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetClockClass(context.Context, *Empty) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClockClass not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetInfo(context.Context, *Empty) (*InfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetParam(context.Context, *ParamRequest) (*ParamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParam not implemented")
}
func (UnimplementedTsynctlGrpcServer) GetParams(context.Context, *Empty) (*ParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedTsynctlGrpcServer) mustEmbedUnimplementedTsynctlGrpcServer() {}

// UnsafeTsynctlGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TsynctlGrpcServer will
// result in compilation errors.
type UnsafeTsynctlGrpcServer interface {
	mustEmbedUnimplementedTsynctlGrpcServer()
}

func RegisterTsynctlGrpcServer(s grpc.ServiceRegistrar, srv TsynctlGrpcServer) {
	s.RegisterService(&TsynctlGrpc_ServiceDesc, srv)
}

func _TsynctlGrpc_GetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetAlarms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TsynctlGrpcServer).GetAlarms(m, &tsynctlGrpcGetAlarmsServer{stream})
}

type TsynctlGrpc_GetAlarmsServer interface {
	Send(*AlarmReply) error
	grpc.ServerStream
}

type tsynctlGrpcGetAlarmsServer struct {
	grpc.ServerStream
}

func (x *tsynctlGrpcGetAlarmsServer) Send(m *AlarmReply) error {
	return x.ServerStream.SendMsg(m)
}

func _TsynctlGrpc_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetStat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_ResetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).ResetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/ResetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).ResetStat(ctx, req.(*ResetStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetClockClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetClockClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetClockClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetClockClass(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetParam(ctx, req.(*ParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsynctlGrpc_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsynctlGrpcServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_tsynctl.TsynctlGrpc/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsynctlGrpcServer).GetParams(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TsynctlGrpc_ServiceDesc is the grpc.ServiceDesc for TsynctlGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TsynctlGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_tsynctl.TsynctlGrpc",
	HandlerType: (*TsynctlGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMode",
			Handler:    _TsynctlGrpc_GetMode_Handler,
		},
		{
			MethodName: "GetTime",
			Handler:    _TsynctlGrpc_GetTime_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _TsynctlGrpc_GetStat_Handler,
		},
		{
			MethodName: "ResetStat",
			Handler:    _TsynctlGrpc_ResetStat_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TsynctlGrpc_GetStatus_Handler,
		},
		{
			MethodName: "GetClockClass",
			Handler:    _TsynctlGrpc_GetClockClass_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _TsynctlGrpc_GetInfo_Handler,
		},
		{
			MethodName: "GetParam",
			Handler:    _TsynctlGrpc_GetParam_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _TsynctlGrpc_GetParams_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAlarms",
			Handler:       _TsynctlGrpc_GetAlarms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_tsynctl.proto",
}
